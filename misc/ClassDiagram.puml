@startuml
package model {
    class User {
        -id: UUID
        -email: String
        -password: String
        -username: String
    }
    enum TokenRequestReason {
        REGISTRATION
        PASSWORD_RESET
    }
    enum ParticipantRole {
        ADMIN
        GUEST
    }
    'Composite key class for Participant'
    class ParticipantId {
        +userId: UUID
        +activityId: UUID
    }
    class Participant {
        -compositeKey: ParticipantId
        -role: ParticipantRole
    }
    class Activity {
        -id: UUID
        -name: String
        -description: String
        -location: String
    }
    'Composite key class for Token'
    class TokenId {
        +userId: UUID
        +reason: TokenRequestReason
    }
    class Token {
        -compositeKey: TokenId
        -token: String
        -counter: int
        -createdDate: Long
        -expiryDate: Long
    }

    User "1" -l-> "0..*" Participant: Is a
    Activity "1..*" -r-> "1.*" Participant : Has
    Participant o-d- ParticipantId : composite key
    Participant -d-> ParticipantRole: Is
    User "1" --> "0..*" Token : issues
    Token --> TokenRequestReason : for
}

package repository {
    interface UserRepository
    interface ActivityRepository
    interface TokenRepository
    interface ParticipantRepository
}

package service {
    class TokenService {
        -maxRegistrationAttempts: int
        -maxPasswordResetAttempts: int
        -tokenRepository: TokenRepository
        +generateToken(userId: UUID, reason: TokenRequestReason): Token
        -deleteToken(tokenId: UUID): void
        +getToken(tokenRequestDto: TokenRequestDto): Token
    }

    interface TokenServiceApi {
        +generateToken(userId: UUID, reason: TokenRequestReason): Token
        -deleteToken(tokenId: UUID): void
        +getToken(tokenRequestDto: TokenRequestDto): Token
    }

    class UserManagementService {
        -tokenServiceApi: TokenServiceApi
        -userRepository: UserRepository
        -verificationServiceApi: VerificationServiceApi
        +registerUser(registrationDto:RegistrationDto): void
        +resetPassword(userId: UUID): boolean
    }

    interface UserManagementApi {
        +registerUser(userDto): void
        +resetPassword(userId): boolean
    }

    class ActivityService {
        -activityRepository: ActivityRepository
        -participantRepository: ParticipantRepository
        +createActivity(createActivityDto: CreateActivityDto): ActivityDto
        +updateActivity(updateActivityDto: UpdateActivityDto): ActivityDto
        +deleteActivity(activityId: UUID): void
        +getActivity(activityFilter: FilterActivityDto): List<ActivityDto>
        +joinActivity(userId: UUID, activityId: UUID): void
        +leaveActivity(userId: UUID, activityId: UUID): void
        +getParticipantsOf(activityId: UUID): List<ParticipantDto>
    }

    interface ActivityServiceApi {
        +createActivity(createActivityDto: CreateActivityDto): ActivityDto
        +updateActivity(updateActivityDto: UpdateActivityDto): ActivityDto
        +deleteActivity(activityId: UUID): void
        +getActivity(activityFilter: FilterActivityDto): List<ActivityDto>
        +joinActivity(userId: UUID, activityId: UUID): void
        +leaveActivity(userId: UUID, activityId: UUID): void
    }

    class EmailVerificationService {
        -userManagementApi: UserManagementApi
        -emailVerificationRepository: VerificationRepository
        -emailSpringServiceApi: emailSpringServiceApi
        +sendVerificationEmail(user): void
        +getVerification(email: String): EmailVerificationDto
    }

    interface VerificationServiceApi {
        +sendVerification(userDto: UserDto): void
        +isVerified(userDto: UserDto): boolean
    }

    TokenService .u.|> TokenServiceApi: Implements
    UserManagementService .u.|> UserManagementApi: Implements
    ActivityService .u.|> ActivityServiceApi: Implements
    EmailVerificationService .u.|> VerificationServiceApi: Implements

    TokenService -d-> repository.TokenRepository: Uses to access token data
    UserManagementService -d-> repository.UserRepository: Uses to access user data
    UserManagementService -u-> VerificationServiceApi: Uses to send verification email
    UserManagementService -u-> TokenServiceApi: Uses to generate token\nwhen user wants to register or reset password.\nTo delete token when the request is completed.
    ActivityService -d-> repository.ActivityRepository: Uses to access activity data
    ActivityService -d-> repository.ParticipantRepository: Uses to access participant data
}

package controller {
    class AuthController {
        +register(): ResponseEntity
        +login(): ResponseEntity
    }

    class ActivityController {
        +createActivity(): ResponseEntity
        +joinActivity(): ResponseEntity
        +leaveActivity(): ResponseEntity
    }

    class UserController {
        +registerUser(registrationDto:RegistrationDto): ResponseEntity
        +resetPassword(userId: UUID): ResponseEntity
    }

    AuthController -d-> service.UserManagementApi: Uses
    ActivityController -d-> service.ActivityServiceApi: Uses
    UserController -d-> service.UserManagementApi: Uses
}

@enduml
